// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestMVC.MvcEduModels
{
    public partial class MvcEduContext : DbContext
    {
        public MvcEduContext()
        {
        }

        public MvcEduContext(DbContextOptions<MvcEduContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<Classroom> Classrooms { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseCatalog> CourseCatalogs { get; set; }
        public virtual DbSet<Dept> Depts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<Member_Course> Member_Courses { get; set; }
        public virtual DbSet<School> Schools { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=122.116.189.189\\DESKTOP-589FTCQ,1433;Initial Catalog=MvcEdu;Persist Security Info=True;User ID=LIMS_USER;Password=LIMS");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => e.Account1);

                entity.ToTable("Account");

                entity.Property(e => e.Account1)
                    .HasMaxLength(64)
                    .HasColumnName("Account")
                    .HasComment("會員帳戶");

                entity.Property(e => e.ID).HasComment("帳號ID");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasComment("會員帳戶密碼");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("狀態(使用中，停權)");
            });

            modelBuilder.Entity<Audit>(entity =>
            {
                entity.HasKey(e => e.Audit_ID);

                entity.ToTable("Audit");

                entity.Property(e => e.Audit_ID)
                    .ValueGeneratedNever()
                    .HasComment("權限編號");

                entity.Property(e => e.Audit1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Audit")
                    .HasComment("權限(admin,supervisor,emp,member)");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("狀態");
            });

            modelBuilder.Entity<Classroom>(entity =>
            {
                entity.ToTable("Classroom");

                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasComment("編號");

                entity.Property(e => e.Capacity).HasComment("教室人數容量");

                entity.Property(e => e.ClassroomStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("教室狀態(使用中，空閒，維修中)");

                entity.Property(e => e.Floor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("教室樓層");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("教室名稱");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("狀態");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .HasComment("教室分機");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.ToTable("Course");

                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasComment("課程ID");

                entity.Property(e => e.Certificate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("是否需要認證(Y,N)");

                entity.Property(e => e.CourseCatalog)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("課程類型(CourseCatalog.CatalogID)");

                entity.Property(e => e.CourseDesc)
                    .IsRequired()
                    .HasComment("課程描述");

                entity.Property(e => e.CourseHour)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("課程時數(小時)");

                entity.Property(e => e.CourseName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("課程名稱");

                entity.Property(e => e.CoursePrice).HasComment("課程定價");

                entity.Property(e => e.CourseStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("課程狀態(是否開課) Y,N");

                entity.Property(e => e.Date_End)
                    .HasColumnType("date")
                    .HasComment("課程結束日期");

                entity.Property(e => e.Date_Start)
                    .HasColumnType("date")
                    .HasComment("課程起始日期");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("狀態");

                entity.Property(e => e.StudentCapacity).HasComment("開課人數");

                entity.Property(e => e.Teacher)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("授課教師");
            });

            modelBuilder.Entity<CourseCatalog>(entity =>
            {
                entity.ToTable("CourseCatalog");

                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasComment("編號");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("課程類型名稱(語言，資安，作業系統，資料庫，…)");
            });

            modelBuilder.Entity<Dept>(entity =>
            {
                entity.HasKey(e => e.Dept_ID);

                entity.ToTable("Dept");

                entity.Property(e => e.Dept_ID)
                    .ValueGeneratedNever()
                    .HasComment("部門編號");

                entity.Property(e => e.Dept_Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("部門名稱");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasComment("編號");

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("帳號");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("住址");

                entity.Property(e => e.Audit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("權限");

                entity.Property(e => e.Birthday)
                    .HasColumnType("date")
                    .HasComment("生日");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(50)
                    .HasComment("員工手機");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("部門ID");

                entity.Property(e => e.Education)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("學歷");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("員工Email");

                entity.Property(e => e.EmergencyCell)
                    .HasMaxLength(50)
                    .HasComment("緊急連絡人電話");

                entity.Property(e => e.EmergencyContact)
                    .HasMaxLength(50)
                    .HasComment("緊急聯絡人");

                entity.Property(e => e.EmpStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("員工狀態(在職，離職，留職停薪)");

                entity.Property(e => e.HireDate)
                    .HasColumnType("date")
                    .HasComment("入職日期");

                entity.Property(e => e.LineID)
                    .HasMaxLength(50)
                    .HasComment("員工Line");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("員工名字");

                entity.Property(e => e.Photo)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasComment("員工照片");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("職位");

                entity.Property(e => e.Relation)
                    .HasMaxLength(50)
                    .HasComment("緊急連絡人關係");

                entity.Property(e => e.Salary).HasComment("薪資");

                entity.Property(e => e.SpecialDayoff)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("休假剩餘天數");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("狀態");

                entity.Property(e => e.Supervisor).HasComment("上級(ID)");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .HasComment("員工電話");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.ToTable("Member");

                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasComment("會員ID");

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasComment("帳戶");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasComment("住址");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("date")
                    .HasComment("生日日期");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(50)
                    .HasComment("手機號碼");

                entity.Property(e => e.Education)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("教育程度");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("電子郵件");

                entity.Property(e => e.Fee).HasComment("會費");

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("性別");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("date")
                    .HasComment("加入日期");

                entity.Property(e => e.LineID)
                    .HasMaxLength(50)
                    .HasComment("Line");

                entity.Property(e => e.Membership)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("會員等級(鑽石，白金，金，銀，無)");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasComment("會員大頭照");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("狀態");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .HasComment("市話");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("類型");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("會員姓名");
            });

            modelBuilder.Entity<Member_Course>(entity =>
            {
                entity.ToTable("Member_Course");

                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasComment("編號");

                entity.Property(e => e.Certificate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("是否得到認證(Y,N)");

                entity.Property(e => e.ClassroomID).HasComment("教室編號");

                entity.Property(e => e.CourseID).HasComment("課程編號");

                entity.Property(e => e.CourseName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("課程名稱");

                entity.Property(e => e.Date_End)
                    .HasColumnType("date")
                    .HasComment("課程結束日期");

                entity.Property(e => e.Date_Start)
                    .HasColumnType("date")
                    .HasComment("課程起始日期");

                entity.Property(e => e.MemberName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("會員名稱");

                entity.Property(e => e.MemberStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("會員上課狀態(在學，畢業，中離)");

                entity.Property(e => e.Score).HasComment("考試分數");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("狀態");
            });

            modelBuilder.Entity<School>(entity =>
            {
                entity.ToTable("School");

                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasComment("編號");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("學校名稱");

                entity.Property(e => e.SchoolType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("學校類型(高中，專科，大學，研究所)");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("狀態");
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.ToTable("Teacher");

                entity.Property(e => e.ID)
                    .ValueGeneratedNever()
                    .HasComment("編號");

                entity.Property(e => e.Birthday)
                    .HasColumnType("date")
                    .HasComment("教師生日");

                entity.Property(e => e.Education)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength()
                    .HasComment("學歷");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("教師Email");

                entity.Property(e => e.Experience)
                    .IsRequired()
                    .HasComment("教師經歷");

                entity.Property(e => e.Expertise)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("專長(語言，資安，資料庫...)");

                entity.Property(e => e.LineID)
                    .HasMaxLength(50)
                    .HasComment("教師Line");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("教師名字");

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasComment("教師大頭照");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasComment("狀態");

                entity.Property(e => e.TeacherStatue)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("是否在職(Y,N)");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .HasComment("教師電話(手機號碼)");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}